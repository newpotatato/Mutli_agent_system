import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd
import json
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial']
plt.rcParams['axes.unicode_minus'] = False
sns.set_style("whitegrid")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('additional_visualization', exist_ok=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
with open('logs/real_llm_execution_summary.json', 'r', encoding='utf-8') as f:
    execution_summary = json.load(f)

with open('logs/real_llm_tasks.json', 'r', encoding='utf-8') as f:
    task_details = json.load(f)

print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö LLM –∞–≥–µ–Ω—Ç–æ–≤...")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {len(task_details['tasks'])}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(execution_summary['executor_stats'])}")

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
agents_list = list(execution_summary['executor_stats'].keys())
task_types_from_tasks = [task['task_type'] for task in task_details['tasks']]
unique_task_types = list(set(task_types_from_tasks))

# 1. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á (—Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏)
print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã...")

# –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
performance_matrix = np.zeros((len(agents_list), len(unique_task_types)))
task_count_matrix = np.zeros((len(agents_list), len(unique_task_types)))

for task in task_details['tasks']:
    agent_id = task['executor_id']
    task_type = task['task_type']
    
    if agent_id in agents_list and task_type in unique_task_types:
        agent_idx = agents_list.index(agent_id)
        type_idx = unique_task_types.index(task_type)
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = –∫–∞—á–µ—Å—Ç–≤–æ_–æ—Ç–≤–µ—Ç–∞ / –≤—Ä–µ–º—è_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        duration = max(task['execution_metrics']['duration'], 0.1)  # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
        tokens = task['execution_metrics']['tokens']
        cost = task['execution_metrics']['cost']
        
        # –ú–µ—Ç—Ä–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –º–µ–Ω—å—à–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ = –ª—É—á—à–µ
        quality_score = tokens / max(cost * 1000, 1)  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        efficiency = quality_score / duration
        
        performance_matrix[agent_idx, type_idx] += efficiency
        task_count_matrix[agent_idx, type_idx] += 1

# –£—Å—Ä–µ–¥–Ω—è–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á
with np.errstate(divide='ignore', invalid='ignore'):
    avg_performance = np.divide(performance_matrix, task_count_matrix)
    avg_performance = np.nan_to_num(avg_performance, nan=0.0)

# –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
if np.max(avg_performance) > 0:
    avg_performance = avg_performance / np.max(avg_performance)

plt.figure(figsize=(14, 8))
heatmap = sns.heatmap(avg_performance, 
                     annot=True, 
                     fmt='.3f', 
                     xticklabels=[t.replace('_', ' ').title() for t in unique_task_types], 
                     yticklabels=[f'Agent {i+1}' for i in range(len(agents_list))], 
                     cmap='RdYlGn',
                     center=0.5,
                     square=True,
                     linewidths=0.5,
                     cbar_kws={'label': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∫–∞—á–µ—Å—Ç–≤–æ/–≤—Ä–µ–º—è)'})

plt.title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ LLM –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á\n(–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö API –¥–∞–Ω–Ω—ã—Ö)', 
         fontsize=16, fontweight='bold', pad=20)
plt.xlabel('–¢–∏–ø—ã –∑–∞–¥–∞—á', fontsize=12)
plt.ylabel('LLM –ê–≥–µ–Ω—Ç—ã', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.tight_layout()
plt.savefig('additional_visualization/1_heatmap_performance.png', dpi=300, bbox_inches='tight')
print("‚úÖ –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
plt.show()

# 2. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è vs —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
print("2. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
actual_times = [task['execution_metrics']['duration'] for task in task_details['tasks']]
# –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–¥–∏–º "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ" –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
predicted_times = []
for task in task_details['tasks']:
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    priority = task['task_priority']
    complexity = task['task_complexity']
    predicted_time = (priority * complexity) / 10.0  # –ø—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    predicted_times.append(predicted_time)

task_indices = range(len(task_details['tasks']))
task_names = [f"Task {i+1}" for i in task_indices]

plt.figure(figsize=(14, 8))
plt.subplot(2, 1, 1)
plt.plot(task_indices, predicted_times, 'o-', label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è', color='blue', alpha=0.7)
plt.plot(task_indices, actual_times, 's-', label='–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è', color='red', alpha=0.7)
plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', fontsize=14, fontweight='bold')
plt.xlabel('–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏')
plt.ylabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)')
plt.legend()
plt.grid(True, alpha=0.3)

# Scatter plot –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
plt.subplot(2, 1, 2)
plt.scatter(predicted_times, actual_times, alpha=0.6, s=100)
plt.plot([min(predicted_times + actual_times), max(predicted_times + actual_times)], 
         [min(predicted_times + actual_times), max(predicted_times + actual_times)], 'r--', alpha=0.8)
plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Å–µ–∫)')
plt.ylabel('–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—Å–µ–∫)')
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('additional_visualization/2_time_prediction_comparison.png', dpi=300, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
plt.show()

# 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∞–≥–µ–Ω—Ç–∞–º
print("3. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á...")

agent_task_counts = {}
for task in task_details['tasks']:
    agent = task['executor_id']
    agent_task_counts[agent] = agent_task_counts.get(agent, 0) + 1

agent_names = list(agent_task_counts.keys())
task_counts = list(agent_task_counts.values())
percentages = [count / len(task_details['tasks']) * 100 for count in task_counts]

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

# –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#ff99cc']
wedges, texts, autotexts = ax1.pie(task_counts, 
                                   labels=[f'Agent {i+1}' for i in range(len(agent_names))],
                                   autopct='%1.1f%%',
                                   startangle=90,
                                   colors=colors[:len(agent_names)],
                                   explode=[0.05 if x == max(task_counts) else 0 for x in task_counts])
ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∞–≥–µ–Ω—Ç–∞–º\n(% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)', fontsize=14, fontweight='bold')

# –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
bars = ax2.bar([f'Agent {i+1}' for i in range(len(agent_names))], 
               task_counts, 
               color=colors[:len(agent_names)], 
               alpha=0.8)
ax2.set_xlabel('LLM –ê–≥–µ–Ω—Ç—ã', fontsize=12)
ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á', fontsize=12)
ax2.set_title('–ù–∞–≥—Ä—É–∑–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ (–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)', fontsize=14, fontweight='bold')

# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
for bar, count in zip(bars, task_counts):
    ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
            str(count), ha='center', va='bottom', fontweight='bold')

ax2.grid(True, alpha=0.3, axis='y')
plt.tight_layout()
plt.savefig('additional_visualization/3_task_distribution.png', dpi=300, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
plt.show()

# 4. –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ —Ç–∏–ø–∞–º
print("4. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á...")

task_type_success = {}
for task_type in unique_task_types:
    if task_type in execution_summary['task_types_stats']:
        success_rate = (execution_summary['task_types_stats'][task_type]['success'] / 
                       execution_summary['task_types_stats'][task_type]['count'])
        task_type_success[task_type] = success_rate * 100
    else:
        task_type_success[task_type] = 100.0  # –í—Å–µ –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —É—Å–ø–µ—à–Ω—ã

task_type_names = list(task_type_success.keys())
success_percentages = list(task_type_success.values())

plt.figure(figsize=(12, 8))
bars = plt.bar([t.replace('_', ' ').title() for t in task_type_names], 
               success_percentages, 
               color='lightcoral', 
               alpha=0.8,
               edgecolor='black',
               linewidth=1)

plt.title('–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ —Ç–∏–ø–∞–º\n(–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ LLM API)', 
         fontsize=16, fontweight='bold', pad=20)
plt.xlabel('–¢–∏–ø—ã –∑–∞–¥–∞—á', fontsize=12)
plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ (%)', fontsize=12)
plt.ylim(0, 105)

# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
for bar, percentage in zip(bars, success_percentages):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1, 
            f'{percentage:.1f}%', ha='center', va='bottom', fontweight='bold')

plt.xticks(rotation=45, ha='right')
plt.grid(True, alpha=0.3, axis='y')
plt.tight_layout()
plt.savefig('additional_visualization/4_success_rate_by_type.png', dpi=300, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
plt.show()

# 5. –î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –±—Ä–æ–∫–µ—Ä–∞
print("5. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –æ—à–∏–±–æ–∫...")

# –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º –∏ —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
prediction_errors = []
for i, task in enumerate(task_details['tasks']):
    predicted = predicted_times[i]
    actual = actual_times[i]
    error = abs(predicted - actual) / max(actual, 0.1) * 100  # –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    prediction_errors.append(error)

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
error_by_type = {}
for i, task in enumerate(task_details['tasks']):
    task_type = task['task_type']
    if task_type not in error_by_type:
        error_by_type[task_type] = []
    error_by_type[task_type].append(prediction_errors[i])

# –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –ø–æ —Ç–∏–ø–∞–º
avg_errors = {task_type: np.mean(errors) for task_type, errors in error_by_type.items()}

plt.figure(figsize=(12, 8))
task_types_for_error = list(avg_errors.keys())
avg_error_values = list(avg_errors.values())

plt.plot(range(len(task_types_for_error)), avg_error_values, 'o-', 
         linewidth=2, markersize=8, color='red', alpha=0.7)
plt.fill_between(range(len(task_types_for_error)), avg_error_values, alpha=0.3, color='red')

plt.title('–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n(–ü–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á)', 
         fontsize=16, fontweight='bold', pad=20)
plt.xlabel('–¢–∏–ø—ã –∑–∞–¥–∞—á', fontsize=12)
plt.ylabel('–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ (%)', fontsize=12)
plt.xticks(range(len(task_types_for_error)), 
          [t.replace('_', ' ').title() for t in task_types_for_error], 
          rotation=45, ha='right')
plt.grid(True, alpha=0.3)

# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ—á–µ–∫
for i, error in enumerate(avg_error_values):
    plt.text(i, error + max(avg_error_values) * 0.02, 
            f'{error:.1f}%', ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.savefig('additional_visualization/5_prediction_error_trend.png', dpi=300, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
plt.show()

# 6. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–¥–∞—á
print("6. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ vs –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã...")

priorities = [task['task_priority'] for task in task_details['tasks']]
complexities = [task['task_complexity'] for task in task_details['tasks']]

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))

# –ì—Ä–∞—Ñ–∏–∫ 1: –í—Ä–µ–º—è vs –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
scatter1 = ax1.scatter(priorities, predicted_times, alpha=0.6, s=100, c='blue', label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è')
scatter2 = ax1.scatter(priorities, actual_times, alpha=0.6, s=100, c='red', label='–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è')
ax1.set_xlabel('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏', fontsize=12)
ax1.set_ylabel('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫)', fontsize=12)
ax1.set_title('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è vs –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', fontsize=14, fontweight='bold')
ax1.legend()
ax1.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 2: –í—Ä–µ–º—è vs –°–ª–æ–∂–Ω–æ—Å—Ç—å
ax2.scatter(complexities, predicted_times, alpha=0.6, s=100, c='blue', label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è')
ax2.scatter(complexities, actual_times, alpha=0.6, s=100, c='red', label='–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è')
ax2.set_xlabel('–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏', fontsize=12)
ax2.set_ylabel('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫)', fontsize=12)
ax2.set_title('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è vs –°–ª–æ–∂–Ω–æ—Å—Ç—å', fontsize=14, fontweight='bold')
ax2.legend()
ax2.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
ax3.hist(priorities, bins=range(min(priorities), max(priorities)+2), 
         alpha=0.7, color='skyblue', edgecolor='black')
ax3.set_xlabel('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', fontsize=12)
ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á', fontsize=12)
ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–¥–∞—á', fontsize=14, fontweight='bold')
ax3.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 4: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
priority_efficiency = {}
for i, task in enumerate(task_details['tasks']):
    priority = task['task_priority']
    tokens = task['execution_metrics']['tokens']
    duration = task['execution_metrics']['duration']
    efficiency = tokens / max(duration, 0.1)
    
    if priority not in priority_efficiency:
        priority_efficiency[priority] = []
    priority_efficiency[priority].append(efficiency)

# –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
avg_efficiency_by_priority = {p: np.mean(effs) for p, effs in priority_efficiency.items()}
priorities_sorted = sorted(avg_efficiency_by_priority.keys())
efficiencies_sorted = [avg_efficiency_by_priority[p] for p in priorities_sorted]

ax4.bar(priorities_sorted, efficiencies_sorted, color='lightgreen', alpha=0.8, edgecolor='black')
ax4.set_xlabel('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏', fontsize=12)
ax4.set_ylabel('–°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ç–æ–∫–µ–Ω—ã/—Å–µ–∫)', fontsize=12)
ax4.set_title('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º', fontsize=14, fontweight='bold')
ax4.grid(True, alpha=0.3, axis='y')

plt.tight_layout()
plt.savefig('additional_visualization/6_priority_analysis.png', dpi=300, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
plt.show()

print("\nüéâ –í—Å–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
print("  1. 1_heatmap_performance.png - –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤")
print("  2. 2_time_prediction_comparison.png - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
print("  3. 3_task_distribution.png - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∞–≥–µ–Ω—Ç–∞–º")
print("  4. 4_success_rate_by_type.png - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á")
print("  5. 5_prediction_error_trend.png - –î–∏–Ω–∞–º–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
print("  6. 6_priority_analysis.png - –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º")

# –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
print("\nüìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(task_details['tasks'])}")
print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(agents_list)}")
print(f"‚Ä¢ –¢–∏–ø—ã –∑–∞–¥–∞—á: {', '.join(unique_task_types)}")
print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {np.mean(actual_times):.2f} —Å–µ–∫")
print(f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${execution_summary['performance']['total_cost']:.4f}")
print(f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_summary['session_info']['success_rate'] * 100:.1f}%")

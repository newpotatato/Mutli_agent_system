#!/usr/bin/env python3
"""
üîç –°–ö–†–ò–ü–¢ –ü–†–û–í–ï–†–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò API –ö–õ–Æ–ß–ï–ô

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ api_keys.json
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
3. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python check_config.py
"""

import asyncio
import json
import os
import sys
from typing import Dict, Any

def print_header(title: str):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def print_section(title: str):
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\nüî∏ {title}")
    print("-" * 40)

def check_json_file() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ api_keys.json"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    config_path = "api_keys.json"
    
    if not os.path.exists(config_path):
        print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª api_keys.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –ø–æ –æ–±—Ä–∞–∑—Ü—É –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
        sys.exit(1)
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        print("‚úÖ –§–∞–π–ª api_keys.json –Ω–∞–π–¥–µ–Ω –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return config
    except json.JSONDecodeError as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: {e}")
        sys.exit(1)

def analyze_config(config: Dict[str, Any]):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print_section("–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    services = ['huggingface', 'groq', 'anthropic', 'openai', 'together', 'replicate', 'cohere']
    configured_services = []
    empty_services = []
    
    for service in services:
        if service in config:
            service_config = config[service]
            has_key = False
            
            if isinstance(service_config, dict):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
                key_fields = ['api_key', 'api_token', 'token', 'key']
                for field in key_fields:
                    if field in service_config and service_config[field] and service_config[field].strip():
                        has_key = True
                        break
            
            if has_key:
                configured_services.append(service)
                print(f"‚úÖ {service.upper()}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                empty_services.append(service)
                print(f"‚ö™ {service.upper()}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    if 'local' in config:
        print(f"üè† LOCAL: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(configured_services)}")
    print(f"   –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(empty_services)}")
    
    return configured_services, empty_services

def give_recommendations(configured_services: list, empty_services: list):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    print_section("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    if len(configured_services) == 0:
        print("üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–∏ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Groq (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)")
        print("   2. –î–æ–±–∞–≤—å—Ç–µ HuggingFace —Ç–æ–∫–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –Ω–µ–≥–æ, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ)")
        print("   3. –°–º–æ—Ç—Ä–∏—Ç–µ SETUP_GUIDE_RU.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        return
    
    if 'groq' not in configured_services:
        print("‚ö° –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: –î–æ–±–∞–≤—å—Ç–µ Groq –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏")
    
    if 'huggingface' not in configured_services:
        print("ü§ó –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: –î–æ–±–∞–≤—å—Ç–µ HuggingFace –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∑–µ—Ä–≤")
    
    if 'together' not in configured_services:
        print("üéÅ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨: Together AI –¥–∞–µ—Ç $25 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤")
    
    if 'anthropic' not in configured_services:
        print("üß† –î–õ–Ø –ö–ê–ß–ï–°–¢–í–ê: Anthropic Claude –¥–∞–µ—Ç $5 –±–µ—Å–ø–ª–∞—Ç–Ω–æ + –æ—á–µ–Ω—å —É–º–Ω—ã–µ –º–æ–¥–µ–ª–∏")
    
    if len(configured_services) >= 3:
        print("üéâ –û–¢–õ–ò–ß–ù–û: –£ –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã!")
    elif len(configured_services) >= 2:
        print("üëç –•–û–†–û–®–û: –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã")
    else:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ—â–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞")

async def test_providers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print_section("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    
    try:
        from src.llm_providers.provider_manager import create_default_provider_manager
        
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
        manager = create_default_provider_manager()
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
        await manager.check_all_providers()
        
        available_providers = manager.get_available_providers()
        
        if available_providers:
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(available_providers)}")
            for provider in available_providers:
                print(f"   ‚úì {provider.name}")
                
            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            print("\nüß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
            test_prompt = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
            response = await manager.generate(test_prompt, max_tokens=50)
            print(f"üìù –û—Ç–≤–µ—Ç: {response[:100]}{'...' if len(response) > 100 else ''}")
            
        else:
            print("‚ùå –ù–ò –û–î–ò–ù –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π")
            print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            print("   - –õ–∏–º–∏—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤")
        
    except ImportError as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")

def print_next_steps(configured_services: list):
    """–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"""
    print_section("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏")
    
    if len(configured_services) == 0:
        print("1. üìñ –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ SETUP_GUIDE_RU.md")
        print("2. üîë –ü–æ–ª—É—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Groq)")
        print("3. ‚úèÔ∏è  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ api_keys.json")
        print("4. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
    else:
        print("1. üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python examples/demo_final.py")
        print("2. üß™ –ò–ª–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python tests/test_full_architecture.py")
        print("3. üìö –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ –ø–∞–ø–∫–µ docs/")
        print("4. üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_header("üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ú–£–õ–¨–¢–ò-–ê–ì–ï–ù–¢–ù–û–ô –°–ò–°–¢–ï–ú–´")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
    config = check_json_file()
    
    # 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    configured_services, empty_services = analyze_config(config)
    
    # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    give_recommendations(configured_services, empty_services)
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã)
    if configured_services:
        await test_providers()
    else:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    
    # 5. –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    print_next_steps(configured_services)
    
    print_header("–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    
    if len(configured_services) >= 2:
        print("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    elif len(configured_services) == 1:
        print("‚ö° –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.")
    else:
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("üêõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º")

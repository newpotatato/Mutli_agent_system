#!/usr/bin/env python3
"""
üî• –ü–û–õ–ù–´–ô –¶–ò–ö–õ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –†–ï–ê–õ–¨–ù–´–• LLM

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM –∞–≥–µ–Ω—Ç–∞–º–∏
2. –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∞–≥–µ–Ω—Ç—ã –∏ –∏—Ö —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_complete_real_llm_analysis.py
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(__file__))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
try:
    from tests.test_real_llm_pipeline import RealLLMArchitectureTest
    from src.visualization.real_llm_visualization import RealLLMVisualization
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    import sys
    sys.path.insert(0, '.')
    from tests.test_real_llm_pipeline import RealLLMArchitectureTest
    from src.visualization.real_llm_visualization import RealLLMVisualization


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
    print("üî• –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ê–ù–ê–õ–ò–ó–ê –†–ï–ê–õ–¨–ù–´–• LLM –ê–ì–ï–ù–¢–û–í")
    print("=" * 70)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üìã –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    print("   1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM")
    print("   2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
    print("=" * 70)
    
    try:
        # –®–ê–ì 1: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM
        print("\nüöÄ –®–ê–ì 1: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM...")
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏!")
        print("üí∞ –í–æ–∑–º–æ–∂–Ω—ã —Ä–∞—Å—Ö–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        print("-" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        test = RealLLMArchitectureTest(num_brokers=4, num_executors=3)
        test_success = await test.run_full_test()
        
        if not test_success:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        print("-" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        visualizer = RealLLMVisualization()
        viz_success = visualizer.create_all_real_graphs()
        
        if not viz_success:
            print("‚ùå –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
        
        # –®–ê–ì 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\nüìã –®–ê–ì 3: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç...")
        print("=" * 70)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if hasattr(test, 'test_results') and 'processing' in test.test_results:
            processing_results = test.test_results['processing']
            successful_tasks = [r for r in processing_results if r['execution_result']['status'] == 'success']
            total_cost = sum(r['execution_result']['cost'] for r in successful_tasks)
            total_tokens = sum(r['execution_result']['tokens'] for r in successful_tasks)
            
            print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processing_results)}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(successful_tasks)}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {len(successful_tasks)/len(processing_results)*100:.1f}%")
            print(f"   ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.6f}")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
            print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(set(r['executor_id'] for r in successful_tasks))}")
        
        print(f"\nüìÅ –°–û–ó–î–ê–ù–´ –§–ê–ô–õ–´:")
        print(f"   üóíÔ∏è  pipeline_test.log - –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã LLM")
        print(f"   üìä real_llm_graphs/ - –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print(f"   üìà test_results/ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print(f"   üìã logs/ - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏")
        
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ LLM –∞–≥–µ–Ω—Ç—ã")
        print("–∏ –∏—Ö —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.")
        
        return True
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


def quick_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        'src/agents/real_llm_executor.py',
        'src/llm_providers/provider_manager.py',
        'tests/test_real_llm_pipeline.py',
        'src/visualization/real_llm_visualization.py'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"   ‚Ä¢ {file_path}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    api_config_exists = os.path.exists('api_keys.json')
    if not api_config_exists:
        print("‚ö†Ô∏è  –§–∞–π–ª api_keys.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã")
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
    return True


if __name__ == "__main__":
    print("üî• –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –ê–ù–ê–õ–ò–ó–ê –†–ï–ê–õ–¨–ù–´–• LLM")
    print("=" * 70)
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not quick_check():
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    try:
        success = asyncio.run(main())
        
        if success:
            print("\nüéä –£–°–ü–ï–•! –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            print("üìä –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ LLM –∞–≥–µ–Ω—Ç–æ–≤.")
        else:
            print("\nüí• –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏.")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç AI –º–æ–¥–µ–ª–µ–π –≤ pipeline_test.log
"""

import sys
import os
import asyncio
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if os.name == 'nt':
    import locale
    try:
        locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
    except locale.Error:
        try:
            locale.setlocale(locale.LC_ALL, 'Russian_Russia.UTF-8')
        except locale.Error:
            pass

import logging
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import json
from typing import List, Dict, Any
import time

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from src.agents.controller import Broker
from src.agents.real_llm_executor import RealLLMExecutor  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ LLM
from src.llm_providers.provider_manager import create_default_provider_manager
from src.core.graph import GraphService
from src.core.task import Task
from src.models.models import predict_load, predict_waiting_time
from src.core.task_response_logger import TaskResponseLogger
from configs.config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
log_filename = 'pipeline_test.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8', mode='w'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def safe_encode_text(text, max_length=None):
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ UTF-8"""
    if text is None:
        return "None"
    
    if not isinstance(text, str):
        text = str(text)
    
    safe_text = text.encode('utf-8', errors='replace').decode('utf-8')
    
    if max_length and len(safe_text) > max_length:
        safe_text = safe_text[:max_length] + "..."
    
    return safe_text

class RealLLMArchitectureTest:
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
    
    def __init__(self, num_brokers=4, num_executors=3):
        self.num_brokers = num_brokers
        self.num_executors = num_executors
        self.test_results = {}
        self.metrics_history = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–¥–∞—á
        self.task_logger = TaskResponseLogger(
            log_file="real_llm_tasks.json",
            detailed_log_file="real_llm_responses.log"
        )
        
        logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ —Å –†–ï–ê–õ–¨–ù–´–ú–ò LLM: {num_brokers} –±—Ä–æ–∫–µ—Ä–æ–≤, {num_executors} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")

    async def step_1_initialize_llm_providers(self):
        """–≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM"""
        logger.info("–≠–¢–ê–ü 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        self.provider_manager = create_default_provider_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        logger.info("   [CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
        await self.provider_manager.check_all_providers()
        
        available_providers = self.provider_manager.get_available_providers()
        logger.info(f"   [OK] –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(available_providers)}")
        
        for provider in available_providers:
            logger.info(f"      ‚úì {provider.name}")
        
        if not available_providers:
            raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤!")
        
        logger.info("   –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω: –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã LLM –≥–æ—Ç–æ–≤—ã\n")

    def step_2_graph_construction(self):
        """–≠—Ç–∞–ø 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –±—Ä–æ–∫–µ—Ä–æ–≤"""
        logger.info("–≠–¢–ê–ü 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –±—Ä–æ–∫–µ—Ä–æ–≤")
        
        self.graph_service = GraphService(self.num_brokers)
        stats = self.graph_service.get_graph_stats()
        
        logger.info(f"   [+] –°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ: {stats['num_nodes']} —É–∑–ª–æ–≤, {stats['num_edges']} —Ä–µ–±–µ—Ä")
        logger.info(f"   [+] –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä–∞—Ñ–∞: {stats['density']:.3f}")
        logger.info(f"   [+] –°—Ä–µ–¥–Ω—è—è —Å—Ç–µ–ø–µ–Ω—å: {stats['average_degree']:.2f}")
        
        self.test_results['graph_stats'] = stats
        logger.info("   –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω: –ì—Ä–∞—Ñ –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")

    def step_3_broker_initialization(self):
        """–≠—Ç–∞–ø 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–æ–∫–µ—Ä–æ–≤"""
        logger.info("–≠–¢–ê–ü 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–æ–∫–µ—Ä–æ–≤")
        
        self.brokers = []
        for i in range(self.num_brokers):
            broker = Broker(i, self.graph_service)
            self.brokers.append(broker)
            logger.info(f"   [OK] –ë—Ä–æ–∫–µ—Ä {i}: Œ∏ = {np.array(broker.theta)}")
        
        self.test_results['initial_thetas'] = [broker.theta.copy() for broker in self.brokers]
        logger.info("   –≠—Ç–∞–ø 3 –∑–∞–≤–µ—Ä—à–µ–Ω: –ë—Ä–æ–∫–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n")

    async def step_4_real_executor_initialization(self):
        """–≠—Ç–∞–ø 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM"""
        logger.info("–≠–¢–ê–ü 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM")
        
        self.executors = []
        for i in range(self.num_executors):
            # –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
            executor = RealLLMExecutor(f"real_executor_{i}", self.provider_manager)
            self.executors.append(executor)
            
            status = executor.get_status()
            logger.info(f"   [OK] –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {i}: {status['type']}, "
                       f"–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {status['available_providers']}/{status['total_providers']}")
        
        self.test_results['executor_count'] = self.num_executors
        logger.info("   –≠—Ç–∞–ø 4 –∑–∞–≤–µ—Ä—à–µ–Ω: –†–µ–∞–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –≥–æ—Ç–æ–≤—ã\n")

    def step_5_task_generation(self):
        """–≠—Ç–∞–ø 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        logger.info("–≠–¢–ê–ü 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á")
        
        # –ë–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π LLM
        test_prompts = [
            "–†–µ—à–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x^2 + 5x + 6 = 0 –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–∞–∂–¥—ã–π —à–∞–≥",
            "–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ Python —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ —Å—Ñ–µ—Ä–µ –ò–ò",
            "–û–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
            "–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞",
            "–ù–∞–π—Ç–∏ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
            "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Python"
        ]
        
        self.tasks = []
        for i, prompt in enumerate(test_prompts):
            task = Task(prompt, priority=np.random.randint(5, 9), complexity=np.random.randint(4, 8))
            
            task_data = {
                'id': f'task_{i}',
                'text': prompt,
                'prompt': prompt,  # –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
                'type': task.type,
                'features': np.random.random(5),
                'priority': task.priority,
                'complexity': task.complexity,
                'confidence': task.get_confidence_score(),
                'max_tokens': 300,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                'temperature': 0.7
            }
            
            self.tasks.append(task_data)
            logger.info(f"   [TASK] {i}: [{task.type.upper()}] {safe_encode_text(prompt, 50)}")
        
        self.test_results['tasks_generated'] = len(self.tasks)
        logger.info("   –≠—Ç–∞–ø 5 –∑–∞–≤–µ—Ä—à–µ–Ω: –ó–∞–¥–∞—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã\n")

    async def step_6_real_task_processing(self):
        """–≠—Ç–∞–ø 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ LLM"""
        logger.info("[PROCESSING] –≠–¢–ê–ü 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ LLM")
        
        processing_results = []
        
        for i, task_data in enumerate(self.tasks):
            logger.info(f"   [TASK {i+1}/{len(self.tasks)}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {safe_encode_text(task_data['text'], 60)}")
            
            # –í—ã–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (round-robin)
            executor = self.executors[i % len(self.executors)]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á—É
            accepted, reason = executor.accept_task(task_data)
            if not accepted:
                logger.info(f"      [REJECT] –ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {reason}")
                continue
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π LLM
            logger.info(f"      [EXEC] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º {executor.id}...")
            
            start_time = time.time()
            execution_result = await executor.execute_task(task_data)
            processing_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            logger.info(f"      [DONE] –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {execution_result['duration']:.2f}—Å")
            logger.info(f"      [STATUS] {execution_result['status']}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ü–û–õ–ù–´–ô –æ—Ç–≤–µ—Ç –≤ –ª–æ–≥
            if execution_result['status'] == 'success':
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç LLM –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
                logger.info(f"      [LLM_RESPONSE] –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
                response_lines = execution_result['result'].split('\n')
                for line in response_lines:
                    logger.info(f"         {line}")
                
                logger.info(f"      [METRICS] –¢–æ–∫–µ–Ω—ã: {execution_result['tokens']}, "
                           f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ${execution_result['cost']:.6f}")
            else:
                logger.info(f"      [ERROR] {execution_result['result']}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –∑–∞–¥–∞—á
            self.task_logger.log_task_execution(
                task_data=task_data,
                executor_id=executor.id,
                model_response=execution_result['result'],
                execution_metrics={
                    'duration': execution_result['duration'],
                    'tokens': execution_result['tokens'],
                    'cost': execution_result['cost'],
                    'status': execution_result['status'],
                    'timeout_risk': execution_result.get('timeout_risk', 0)
                },
                broker_id=None,
                batch_info={'task_index': i, 'total_tasks': len(self.tasks)}
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            execution_result['task_type'] = task_data['type']
            execution_result['task_text'] = task_data['text']
            
            processing_results.append({
                'task_id': task_data['id'],
                'executor_id': executor.id,
                'execution_result': execution_result,
                'processing_time': processing_time
            })
            
            logger.info("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful_tasks = sum(1 for r in processing_results if r['execution_result']['status'] == 'success')
        total_cost = sum(r['execution_result']['cost'] for r in processing_results)
        total_tokens = sum(r['execution_result']['tokens'] for r in processing_results)
        avg_time = np.mean([r['processing_time'] for r in processing_results])
        
        logger.info(f"   [SUMMARY] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {len(processing_results)}")
        logger.info(f"   [SUMMARY] –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {successful_tasks}")
        logger.info(f"   [SUMMARY] –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.6f}")
        logger.info(f"   [SUMMARY] –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
        logger.info(f"   [SUMMARY] –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å")
        
        self.test_results['processing'] = processing_results
        logger.info("   –≠—Ç–∞–ø 6 –∑–∞–≤–µ—Ä—à–µ–Ω: –†–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n")

    async def step_7_provider_statistics(self):
        """–≠—Ç–∞–ø 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        logger.info("[STATS] –≠–¢–ê–ü 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        
        provider_stats = self.provider_manager.get_provider_stats()
        
        for provider_name, stats in provider_stats.items():
            logger.info(f"   [PROVIDER] {provider_name}:")
            logger.info(f"      ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
            logger.info(f"      ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_requests']}")
            logger.info(f"      ‚Ä¢ –û—à–∏–±–æ–∫: {stats['failed_requests']}")
            logger.info(f"      ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.2%}")
            logger.info(f"      ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_response_time']:.2f}—Å")
            logger.info(f"      ‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if stats['is_available'] else '–ù–µ—Ç'}")
            if stats['last_error']:
                logger.info(f"      ‚Ä¢ –û—à–∏–±–∫–∞: {stats['last_error']}")
        
        self.test_results['provider_stats'] = provider_stats
        logger.info("   –≠—Ç–∞–ø 7 –∑–∞–≤–µ—Ä—à–µ–Ω: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å–æ–±—Ä–∞–Ω–∞\n")

    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("[SAVE] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        os.makedirs("test_results", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = os.path.join("test_results", "real_llm_test_results.json")
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, ensure_ascii=False, indent=2, default=str)
        
        logger.info(f"   [OK] –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_file}")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
        self.task_logger.close_session()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        summary_report = self.task_logger.save_summary_report("real_llm_execution_summary.json")
        logger.info(f"   [OK] –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç: {summary_report}")
        
        logger.info(f"   [OK] –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –æ—Ç–≤–µ—Ç–æ–≤: logs/real_llm_responses.log")
        logger.info(f"   [OK] JSON –ª–æ–≥ –∑–∞–¥–∞—á: logs/real_llm_tasks.json")

    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM"""
        logger.info("üöÄ –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò LLM")
        logger.info("=" * 80)
        
        start_time = time.time()
        
        try:
            await self.step_1_initialize_llm_providers()
            self.step_2_graph_construction()
            self.step_3_broker_initialization()
            await self.step_4_real_executor_initialization()
            self.step_5_task_generation()
            await self.step_6_real_task_processing()
            await self.step_7_provider_statistics()
            self.save_results()
            
            total_time = time.time() - start_time
            
            logger.info("=" * 80)
            logger.info(f"üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            logger.info(f"   ‚Ä¢ {log_filename} - –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ LLM")
            logger.info(f"   ‚Ä¢ logs/real_llm_responses.log - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
            logger.info(f"   ‚Ä¢ logs/real_llm_tasks.json - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            logger.info(f"   ‚Ä¢ test_results/real_llm_test_results.json - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {str(e)}")
            logger.error(f"–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥–µ")
            import traceback
            logger.error(traceback.format_exc())
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –†–ï–ê–õ–¨–ù–´–ú–ò LLM")
    print("=" * 70)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏!")
    print("üí∞ –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    test = RealLLMArchitectureTest(num_brokers=4, num_executors=3)
    success = await test.run_full_test()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.")
        print("üìÑ –í pipeline_test.log –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö LLM –º–æ–¥–µ–ª–µ–π")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

if __name__ == "__main__":
    asyncio.run(main())

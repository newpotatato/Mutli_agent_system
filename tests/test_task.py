"""
Тестирование функции _determine_task_type с показательными примерами промптов
Для каждого типа задач подобраны примеры с ключевыми словами, которые
должны корректно классифицироваться системой.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from src.core.task import Task

# Показательные примеры различных типов задач
# Каждый пример содержит четкие ключевые слова для правильной классификации
test_cases = [
    # === МАТЕМАТИЧЕСКИЕ ЗАДАЧИ (math) ===
    # Содержат математические термины: уравнение, интеграл, вычислить, формула, функция
    ("Решить квадратное уравнение x^2 + 5x + 6 = 0 и найти корни", 5, 7),
    ("Вычислить интеграл от функции sin(x) на отрезке [0, π]", 6, 8),
    ("Найти сумму арифметической прогрессии чисел от 1 до 100", 3, 4),
    ("Построить график функции y = 2x + 3 и найти точки пересечения", 4, 5),
    ("Вычислить производную функции f(x) = x³ + 2x² - 5x + 1", 5, 6),
    ("Решить систему линейных уравнений методом Крамера", 6, 7),
    
    # === ЗАДАЧИ ПРОГРАММИРОВАНИЯ (code) ===
    # Содержат термины: код, python, функция, API, алгоритм, программирование
    ("Написать python код для сортировки массива методом быстрой сортировки", 7, 6),
    ("Создать API функцию для работы с базой данных пользователей", 8, 9),
    ("Отладить код и исправить ошибку в алгоритме поиска", 8, 7),
    ("Реализовать класс для работы с двусвязным списком на Python", 6, 8),
    ("Написать unittest тесты для модуля обработки данных", 5, 6),
    ("Рефакторинг legacy кода с использованием современных паттернов", 7, 8),
    
    # === ТЕКСТОВЫЕ ЗАДАЧИ (text) ===
    # Содержат термины: написать, статья, текст, перевод, грамматика, редактирование
    ("Написать статью о влиянии искусственного интеллекта на образование", 4, 5),
    ("Проверить текст на грамматические и орфографические ошибки", 2, 3),
    ("Перевести технический документ с английского на русский язык", 5, 4),
    ("Написать креативное эссе на тему экологии и устойчивого развития", 4, 4),
    ("Редактирование и корректура научной статьи по биологии", 3, 4),
    ("Создать копирайтинг контент для маркетингового сайта", 5, 5),
    
    # === АНАЛИТИЧЕСКИЕ ЗАДАЧИ (analysis) ===
    # Содержат термины: анализ, данные, исследование, сравнить, проанализировать
    ("Проанализировать данные продаж за последний квартал и выявить тренды", 6, 7),
    ("Сравнить эффективность двух маркетинговых кампаний по метрикам ROI", 7, 8),
    ("Исследовать корреляцию между погодными условиями и продажами", 5, 6),
    ("Анализ пользовательского поведения на веб-сайте с помощью Google Analytics", 6, 7),
    ("Статистический анализ результатов A/B тестирования", 7, 8),
    ("Исследование рынка конкурентов и составление аналитического отчета", 5, 7),
    
    # === ТВОРЧЕСКИЕ ЗАДАЧИ (creative) ===
    # Содержат термины: креативный, создать, дизайн, идеи, концепция, генерация
    ("Придумать креативную концепцию для рекламной кампании нового продукта", 6, 7),
    ("Сгенерировать идеи для инновационного мобильного приложения", 5, 6),
    ("Создать дизайн логотипа и фирменный стиль для IT стартапа", 4, 8),
    ("Разработать креативный слоган для бренда органических продуктов", 3, 5),
    ("Придумать название и концепцию для нового YouTube канала", 4, 5),
    ("Создать художественную иллюстрацию для детской книги", 5, 7),
    
    # === ОБЪЯСНИТЕЛЬНЫЕ ЗАДАЧИ (explanation) ===
    # Содержат термины: объяснить, что такое, как работает, принцип, разъяснить
    ("Объяснить принцип работы квантового компьютера простыми словами", 7, 8),
    ("Что такое машинное обучение и как оно применяется в жизни?", 5, 6),
    ("Как работает алгоритм блокчейна и почему он безопасен?", 6, 7),
    ("Разъяснить суть теории относительности Эйнштейна", 8, 9),
    ("Объяснить механизм работы нейронных сетей для начинающих", 6, 7),
    ("Почему происходит парниковый эффект и как это влияет на климат?", 5, 6),
    
    # === ЗАДАЧИ ПЛАНИРОВАНИЯ (planning) ===
    # Содержат термины: план, планирование, этапы, структура, организовать
    ("Составить план разработки мобильного приложения на 6 месяцев", 7, 8),
    ("Спланировать этапы запуска нового бизнес-проекта", 6, 7),
    ("Организовать структуру команды разработчиков для крупного проекта", 5, 6),
    ("Создать roadmap развития продукта на следующий год", 6, 7),
    ("Составить стратегический план маркетинговой кампании", 5, 6),
    ("Планирование ресурсов и бюджета для IT проекта", 6, 8),
    
    # === ЗАДАЧИ ИССЛЕДОВАНИЯ (research) ===
    # Содержат термины: исследование, найти информацию, изучить, источники
    ("Найти информацию о последних трендах в области искусственного интеллекта", 4, 5),
    ("Изучить научные источники по теме влияния социальных сетей на психику", 5, 6),
    ("Исследовать рынок криптовалют и найти перспективные проекты", 6, 7),
    ("Найти и проанализировать статьи о новых методах лечения рака", 7, 8),
    ("Изучить патентную литературу по теме возобновляемой энергетики", 5, 7),
    
    # === ЗАДАЧИ ОПТИМИЗАЦИИ (optimization) ===
    # Содержат термины: оптимизация, улучшить, эффективность, производительность
    ("Оптимизировать производительность веб-приложения и снизить время загрузки", 7, 8),
    ("Улучшить эффективность алгоритма обработки больших данных", 8, 9),
    ("Оптимизация бизнес-процессов для повышения прибыли компании", 6, 7),
    ("Ускорить работу базы данных путем оптимизации SQL запросов", 7, 8),
    ("Автоматизация рутинных задач для экономии времени сотрудников", 5, 6)
]

def test_task_classification():
    """Тестирование классификации задач с детальной информацией"""
    print("=== ТЕСТИРОВАНИЕ КЛАССИФИКАЦИИ ЗАДАЧ ===")
    print("Каждая задача содержит ключевые слова для правильной классификации\n")
    
    # Счетчики для статистики
    type_stats = {}
    confidence_stats = []
    
    for i, (prompt, priority, complexity) in enumerate(test_cases, 1):
        # Создаем задачу без debug режима для чистого вывода
        task = Task(prompt, priority, complexity, debug=False)
        
        # Обновляем статистику
        if task.type not in type_stats:
            type_stats[task.type] = 0
        type_stats[task.type] += 1
        confidence_stats.append(task.get_confidence_score())
        
        # Выводим информацию о задаче
        print(f"[{i:2d}] Тип: {task.type.upper():12} | Уверенность: {task.get_confidence_score():.2f}")
        print(f"     Задача: {prompt}")
        print(f"     Приоритет: {priority}, Сложность: {complexity}")
        
        # Показываем альтернативные варианты при низкой уверенности
        if task.get_confidence_score() < 0.3:
            alternatives = task.suggest_alternative_types(3)
            print(f"     Альтернативы: {', '.join([f'{t}({s:.2f})' for t, s in alternatives[:3]])}")
        
        print()
    
    # Выводим статистику
    print("=" * 70)
    print("СТАТИСТИКА КЛАССИФИКАЦИИ:")
    print(f"Всего задач: {len(test_cases)}")
    print("\nРаспределение по типам:")
    for task_type, count in sorted(type_stats.items()):
        percentage = (count / len(test_cases)) * 100
        print(f"  {task_type:12} - {count:2d} задач ({percentage:4.1f}%)")
    
    avg_confidence = sum(confidence_stats) / len(confidence_stats)
    print(f"\nСредняя уверенность классификации: {avg_confidence:.2f}")
    
    low_confidence_count = sum(1 for c in confidence_stats if c < 0.3)
    print(f"Задач с низкой уверенностью (< 0.3): {low_confidence_count}")
    
    print("=" * 70)

def test_detailed_classification():
    """Детальное тестирование с выводом скоров для отладки"""
    print("\n=== ДЕТАЛЬНОЕ ТЕСТИРОВАНИЕ (DEBUG РЕЖИМ) ===")
    print("Показывает внутренние скоры классификации\n")
    
    # Берем по одному примеру каждого типа для детального анализа
    sample_tasks = [
        ("Вычислить интеграл от функции sin(x)", "math"),
        ("Написать python код для сортировки массива", "code"),
        ("Написать статью о влиянии ИИ на образование", "text"),
        ("Проанализировать данные продаж за квартал", "analysis"),
        ("Создать креативную концепцию рекламы", "creative"),
        ("Объяснить принцип работы блокчейна", "explanation"),
        ("Составить план разработки приложения", "planning"),
        ("Найти информацию о трендах в ИИ", "research"),
        ("Оптимизировать производительность системы", "optimization")
    ]
    
    for prompt, expected_type in sample_tasks:
        print(f"\n{'='*50}")
        print(f"ТЕСТИРУЕМАЯ ЗАДАЧА: {prompt}")
        print(f"ОЖИДАЕМЫЙ ТИП: {expected_type}")
        print(f"{'='*50}")
        
        # Создаем задачу с debug=True для детального вывода
        task = Task(prompt, 5, 5, debug=True)
        
        print(f"\nРЕЗУЛЬТАТ: {task.type} {'✓' if task.type == expected_type else '✗'}")
        print(f"УВЕРЕННОСТЬ: {task.get_confidence_score():.3f}")
        
        # Показываем топ-3 альтернативы
        alternatives = task.suggest_alternative_types(3)
        print("\nТОП-3 ВАРИАНТА:")
        for i, (t, score) in enumerate(alternatives, 1):
            marker = "👑" if i == 1 else f"{i}."
            print(f"  {marker} {t:12} - {score:.3f}")

def test_edge_cases():
    """Тестирование граничных случаев и неоднозначных задач"""
    print("\n=== ТЕСТИРОВАНИЕ ГРАНИЧНЫХ СЛУЧАЕВ ===")
    
    edge_cases = [
        ("Помоги", 1, 1),
        ("Сделай что-нибудь полезное", 1, 1),
        ("Создать математическую модель для анализа данных", 8, 9),  # math + analysis
        ("Написать код для анализа текста", 6, 7),  # code + text + analysis
        ("Объяснить как программировать на Python", 5, 6),  # explanation + code
        ("Спланировать исследование рынка", 6, 7),  # planning + research
        ("Креативно решить математическую задачу", 7, 8),  # creative + math
    ]
    
    print("Тестируем задачи, которые могут относиться к нескольким типам:\n")
    
    for i, (prompt, priority, complexity) in enumerate(edge_cases, 1):
        task = Task(prompt, priority, complexity)
        alternatives = task.suggest_alternative_types(3)
        
        print(f"[{i}] {prompt}")
        print(f"    Основной тип: {task.type} (уверенность: {task.get_confidence_score():.2f})")
        print(f"    Альтернативы: {', '.join([f'{t}({s:.2f})' for t, s in alternatives[:3]])}")
        print()

if __name__ == "__main__":
    # Основное тестирование
    test_task_classification()
    
    # Детальное тестирование (можно раскомментировать при необходимости)
    # test_detailed_classification()
    
    # Тестирование граничных случаев
    test_edge_cases()

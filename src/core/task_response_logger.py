"""
–°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π
–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ –∏ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
"""

import json
import os
from datetime import datetime
from typing import Dict, Any, List
import logging

class TaskResponseLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, log_file: str = "task_responses.json", 
                 detailed_log_file: str = "detailed_task_responses.log"):
        self.log_file = log_file
        self.detailed_log_file = detailed_log_file
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("logs", exist_ok=True)
        self.log_file = os.path.join("logs", self.log_file)
        self.detailed_log_file = os.path.join("logs", self.detailed_log_file)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        self.detailed_logger = logging.getLogger('task_response_detailed')
        self.detailed_logger.setLevel(logging.INFO)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        for handler in self.detailed_logger.handlers[:]:
            self.detailed_logger.removeHandler(handler)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞
        handler = logging.FileHandler(self.detailed_log_file, 
                                    encoding='utf-8', mode='w')
        formatter = logging.Formatter(
            '%(asctime)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        handler.setFormatter(formatter)
        self.detailed_logger.addHandler(handler)
        self.detailed_logger.propagate = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª JSON
        self._initialize_json_log()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏
        self._log_session_start()
    
    def _initialize_json_log(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç JSON —Ñ–∞–π–ª –ª–æ–≥–∞"""
        initial_data = {
            "session_id": self.session_id,
            "session_start": datetime.now().isoformat(),
            "tasks": []
        }
        
        with open(self.log_file, 'w', encoding='utf-8') as f:
            json.dump(initial_data, f, ensure_ascii=False, indent=2)
    
    def _log_session_start(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥"""
        self.detailed_logger.info("=" * 80)
        self.detailed_logger.info(f"–ù–ê–ß–ê–õ–û –°–ï–°–°–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ó–ê–î–ê–ß –ò –û–¢–í–ï–¢–û–í")
        self.detailed_logger.info(f"Session ID: {self.session_id}")
        self.detailed_logger.info(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.detailed_logger.info("=" * 80)
        self.detailed_logger.info("")
    
    def log_task_execution(self, 
                          task_data: Dict[str, Any], 
                          executor_id: int,
                          model_response: str,
                          execution_metrics: Dict[str, Any],
                          broker_id: int = None,
                          batch_info: Dict[str, Any] = None):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        
        Args:
            task_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (ID, —Ç–µ–∫—Å—Ç, —Ç–∏–ø –∏ —Ç.–¥.)
            executor_id: ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            model_response: –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            execution_metrics: –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤—Ä–µ–º—è, —Ç–æ–∫–µ–Ω—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Ç.–¥.)
            broker_id: ID –±—Ä–æ–∫–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            batch_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        timestamp = datetime.now()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        task_record = {
            "timestamp": timestamp.isoformat(),
            "task_id": task_data.get('id', 'unknown'),
            "task_text": self._safe_encode(task_data.get('text', '')),
            "task_type": task_data.get('type', 'unknown'),
            "task_priority": task_data.get('priority', 0),
            "task_complexity": task_data.get('complexity', 0),
            "broker_id": broker_id,
            "executor_id": executor_id,
            "model_response": self._safe_encode(model_response),
            "execution_metrics": execution_metrics,
            "batch_info": batch_info or {}
        }
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ JSON —Ñ–∞–π–ª
        self._append_to_json_log(task_record)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥
        self._log_detailed_execution(task_record)
    
    def _safe_encode(self, text: str, max_length: int = None) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if text is None:
            return ""
        
        if not isinstance(text, str):
            text = str(text)
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
        safe_text = text.encode('utf-8', errors='replace').decode('utf-8')
        
        if max_length and len(safe_text) > max_length:
            safe_text = safe_text[:max_length] + "..."
        
        return safe_text
    
    def _append_to_json_log(self, task_record: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ JSON —Ñ–∞–π–ª"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            with open(self.log_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            data['tasks'].append(task_record)
            data['last_updated'] = datetime.now().isoformat()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(self.log_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ JSON –ª–æ–≥: {e}")
    
    def _log_detailed_execution(self, task_record: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥"""
        self.detailed_logger.info("‚îÄ" * 80)
        self.detailed_logger.info(f"–ó–ê–î–ê–ß–ê: {task_record['task_id']}")
        self.detailed_logger.info("‚îÄ" * 80)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ
        self.detailed_logger.info(f"üìù –¢–ï–ö–°–¢ –ó–ê–î–ê–ß–ò:")
        self.detailed_logger.info(f"   {task_record['task_text']}")
        self.detailed_logger.info("")
        
        self.detailed_logger.info(f"üè∑Ô∏è  –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:")
        self.detailed_logger.info(f"   ‚Ä¢ –¢–∏–ø: {task_record['task_type']}")
        self.detailed_logger.info(f"   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task_record['task_priority']}")
        self.detailed_logger.info(f"   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {task_record['task_complexity']}")
        
        if task_record['broker_id'] is not None:
            self.detailed_logger.info(f"   ‚Ä¢ –ë—Ä–æ–∫–µ—Ä: {task_record['broker_id']}")
        
        self.detailed_logger.info(f"   ‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task_record['executor_id']}")
        self.detailed_logger.info("")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if task_record['batch_info']:
            batch = task_record['batch_info']
            self.detailed_logger.info(f"üì¶ –ü–ê–ö–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:")
            self.detailed_logger.info(f"   ‚Ä¢ ID –ø–∞–∫–µ—Ç–∞: {batch.get('batch_id', 'N/A')}")
            self.detailed_logger.info(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {batch.get('batch_size', 'N/A')}")
            self.detailed_logger.info(f"   ‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –≤ –ø–∞–∫–µ—Ç–µ: {batch.get('position', 'N/A')}")
            self.detailed_logger.info("")
        
        # –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        self.detailed_logger.info(f"ü§ñ –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò:")
        response_lines = task_record['model_response'].split('\n')
        for line in response_lines:
            self.detailed_logger.info(f"   {line}")
        self.detailed_logger.info("")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        metrics = task_record['execution_metrics']
        self.detailed_logger.info(f"üìä –ú–ï–¢–†–ò–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        
        if 'duration' in metrics:
            self.detailed_logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {metrics['duration']:.3f} —Å–µ–∫")
        if 'tokens' in metrics:
            self.detailed_logger.info(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ã: {metrics['tokens']}")
        if 'cost' in metrics:
            self.detailed_logger.info(f"   ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${metrics['cost']:.4f}")
        if 'status' in metrics:
            self.detailed_logger.info(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {metrics['status']}")
        if 'timeout_risk' in metrics:
            self.detailed_logger.info(f"   ‚Ä¢ –†–∏—Å–∫ —Ç–∞–π–º–∞—É—Ç–∞: {metrics['timeout_risk']:.2%}")
        
        self.detailed_logger.info("")
        self.detailed_logger.info("")
    
    def log_batch_summary(self, batch_id: str, batch_stats: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø–∞–∫–µ—Ç—É –∑–∞–¥–∞—á"""
        self.detailed_logger.info("üéØ " + "=" * 76 + " üéØ")
        self.detailed_logger.info(f"–°–í–û–î–ö–ê –ü–û –ü–ê–ö–ï–¢–£: {batch_id}")
        self.detailed_logger.info("üéØ " + "=" * 76 + " üéØ")
        
        self.detailed_logger.info(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {batch_stats.get('task_count', 0)}")
        self.detailed_logger.info(f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {batch_stats.get('total_time', 0):.3f} —Å–µ–∫")
        self.detailed_logger.info(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: {batch_stats.get('avg_time', 0):.3f} —Å–µ–∫")
        self.detailed_logger.info(f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {batch_stats.get('success_count', 0)}")
        self.detailed_logger.info(f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${batch_stats.get('total_cost', 0):.4f}")
        
        self.detailed_logger.info("")
        self.detailed_logger.info("")
    
    def generate_summary_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º"""
        try:
            with open(self.log_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            tasks = data.get('tasks', [])
            
            if not tasks:
                return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_tasks = len(tasks)
            successful_tasks = sum(1 for task in tasks 
                                 if task['execution_metrics'].get('status') == 'success')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
            task_types = {}
            for task in tasks:
                task_type = task['task_type']
                if task_type not in task_types:
                    task_types[task_type] = {'count': 0, 'success': 0}
                task_types[task_type]['count'] += 1
                if task['execution_metrics'].get('status') == 'success':
                    task_types[task_type]['success'] += 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
            executor_stats = {}
            for task in tasks:
                executor_id = task['executor_id']
                if executor_id not in executor_stats:
                    executor_stats[executor_id] = {
                        'tasks': 0, 'success': 0, 'total_time': 0, 'total_cost': 0
                    }
                
                executor_stats[executor_id]['tasks'] += 1
                if task['execution_metrics'].get('status') == 'success':
                    executor_stats[executor_id]['success'] += 1
                
                executor_stats[executor_id]['total_time'] += task['execution_metrics'].get('duration', 0)
                executor_stats[executor_id]['total_cost'] += task['execution_metrics'].get('cost', 0)
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            durations = [task['execution_metrics'].get('duration', 0) for task in tasks]
            avg_duration = sum(durations) / len(durations) if durations else 0
            
            # –°—Ç–æ–∏–º–æ—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            costs = [task['execution_metrics'].get('cost', 0) for task in tasks]
            total_cost = sum(costs)
            
            summary = {
                "session_info": {
                    "session_id": data.get('session_id'),
                    "session_start": data.get('session_start'),
                    "total_tasks": total_tasks,
                    "successful_tasks": successful_tasks,
                    "success_rate": successful_tasks / total_tasks if total_tasks > 0 else 0
                },
                "task_types_stats": task_types,
                "executor_stats": executor_stats,
                "performance": {
                    "average_duration": avg_duration,
                    "total_cost": total_cost,
                    "average_cost_per_task": total_cost / total_tasks if total_tasks > 0 else 0
                },
                "generated_at": datetime.now().isoformat()
            }
            
            return summary
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"}
    
    def save_summary_report(self, report_file: str = "task_execution_summary.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        summary = self.generate_summary_report()
        
        report_path = os.path.join("logs", report_file)
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(summary, f, ensure_ascii=False, indent=2)
        
        print(f"üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        return report_path
    
    def close_session(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.detailed_logger.info("=" * 80)
        self.detailed_logger.info("–ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ï–°–°–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
        self.detailed_logger.info(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.detailed_logger.info("=" * 80)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.save_summary_report()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
_global_task_logger = None

def get_task_logger() -> TaskResponseLogger:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –∑–∞–¥–∞—á"""
    global _global_task_logger
    if _global_task_logger is None:
        _global_task_logger = TaskResponseLogger()
    return _global_task_logger

def reset_task_logger():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
    global _global_task_logger
    if _global_task_logger:
        _global_task_logger.close_session()
    _global_task_logger = None
